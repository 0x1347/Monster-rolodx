{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/searchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","address","city","CardList","monsters","map","SearchBox","placeholder","handleChanger","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACrB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,QAClB,4BAAIP,EAAMI,QAAQI,QAAQC,WCHrBC,G,MAAW,SAAAV,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SACKD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPdQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,cAAhB,OACrB,uBAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCmCjEG,G,wDAjCb,aAAe,IAAD,8BACZ,gBAWFH,cAAgB,SAACI,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAXpC,EAAKC,MAAO,CACXb,SAAS,GACTU,YAAY,IAJD,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAO9H,WAAS,IAAD,EAEyBC,KAAKN,MAA7Bb,EAFD,EAECA,SAASU,EAFV,EAEUA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAAGA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAEnG,OACG,sBAAKhC,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CACAa,YAAY,iBACZC,cAAee,KAAKf,gBAEpB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BXI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.05d11b95.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css';\n\n\nexport const Card = props =>(\n    <div className='card-container'>\n        <img alt='moster' src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`} />\n        <h2> {props.monster.name} </h2>\n        <p>{props.monster.email}</p>\n        <p>{props.monster.address.city}</p>\n    </div>\n            \n    ); ","import React from \"react\";\nimport {Card} from '../card/card.component';\n\nimport './card-list.style.css';\n\n\nexport const CardList = props =>(\n    \n    <div className='card-list'>\n        {props.monsters.map(monster =>(\n        <Card key={monster.id} monster={monster}/>\n        ))}\n        \n        </div>\n\n\n\n)","import React from \"react\";\nimport './searchBox.style.css'\n\nexport const SearchBox = ({placeholder , handleChanger}) => (\n    <input className='search' type='search' placeholder={placeholder} onChange={handleChanger}/>\n\n)","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/searchBox.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state ={\n     monsters:[],\n     searchField:''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({monsters:users}))\n  }\n\n  handleChanger = (e)=> {\n    this.setState({searchField:e.target.value})\n  }\n\n  render(){\n\n    const {monsters,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster=> monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return( \n       <div className=\"App\">\n         <h1>Moster Rolodex</h1>\n         <SearchBox \n         placeholder='Monster Search' \n         handleChanger={this.handleChanger}\n         />\n         <CardList monsters={filteredMonsters} />\n     </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}